---
name: Publish Docker Images

env:
  DOCKERHUB_NAMESPACE: dfuchs

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Which image(s) to build and publish'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - alma_8
          - alma_9
          - debian_11
          - debian_12
          - ubuntu_22.04
          - ubuntu_24.04

jobs:
  matrix-setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      max_versions: ${{ steps.set-matrix.outputs.max_versions }}
    steps:
      - name: Set matrix and calculate max versions
        id: set-matrix
        run: |
          IMAGES=$(jq -n -c '[
            {"distro_name": "alma", "distro_version": "8", "file": "alma_8", "codename": ""},
            {"distro_name": "alma", "distro_version": "9", "file": "alma_9", "codename": ""},
            {"distro_name": "debian", "distro_version": "11", "file": "debian_11", "codename": "bullseye"},
            {"distro_name": "debian", "distro_version": "12", "file": "debian_12", "codename": "bookworm"},
            {"distro_name": "ubuntu", "distro_version": "22.04", "file": "ubuntu_2204", "codename": "jammy"},
            {"distro_name": "ubuntu", "distro_version": "24.04", "file": "ubuntu_2404", "codename": "noble"}
          ]')

          echo "matrix=$IMAGES" >> $GITHUB_OUTPUT

          MAX_VERSIONS=$(echo "$IMAGES" | jq -c '{
            alma: [.[] | select(.distro_name == "alma") | .distro_version] | max_by(tonumber),
            debian: [.[] | select(.distro_name == "debian") | .distro_version] | max_by(tonumber),
            ubuntu: [.[] | select(.distro_name == "ubuntu") | .distro_version] | max_by(sub("[.]"; "") | tonumber)
          }')
          
          echo "max_versions=$MAX_VERSIONS" >> $GITHUB_OUTPUT

  publish:
    needs: matrix-setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.matrix-setup.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_NAMESPACE }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Publish ${{ matrix.distro_name }}_${{ matrix.distro_version }}
        if: github.event.inputs.image == 'all' || github.event.inputs.image == format('{0}_{1}', matrix.distro_name, matrix.distro_version)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.file }}.Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_NAMESPACE }}/did-${{ matrix.distro_name }}:${{ matrix.distro_version }}
            ${{ matrix.distro_version == fromJson(needs.matrix-setup.outputs.max_versions)[matrix.distro_name] && format('{0}/did-{1}:latest', env.DOCKERHUB_NAMESPACE, matrix.distro_name) || '' }}
            ${{ matrix.codename != '' && format('{0}/did-{1}:{2}', env.DOCKERHUB_NAMESPACE, matrix.distro_name, matrix.codename) || '' }}
          cache-from: type=gha,scope=${{ matrix.distro_name }}_${{ matrix.distro_version }}
